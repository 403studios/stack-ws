from flask import Flask, request
from flask.ext.api import status
from flask.ext.autodoc import Autodoc
from stack import Stack

application = Flask(__name__)
application.config.from_pyfile('config.py')
auto = Autodoc(application)

# Stack objects container
wsStackList = []

@application.route("/")
@auto.doc()
def main():
    '''
    Test endpoint.
    GETs to this endpoint will retrieve the string "Hello World".
    '''
    return "Hello World"

# Manage the list of stack objs
@application.route("/stack", methods=['GET', 'POST'])
@auto.doc()
def stackMgr():
    '''
    Manage stack objects.
    POSTs to this endpoint will create a new stack instance object. Any POST
    data sent with the request is discarded.

    GETs to this endpoint will retrieve all stack instance objects.
    '''
    if request.method == 'GET':
        for i in wsStackList:
            print i
        return str(wsStackList)
    elif request.method == 'POST':
        s = Stack(application.config["STACK_MODE"])
        wsStackList.append(s)
        return str(wsStackList.index(s))

@application.route("/stack/<int:id>", methods=['GET', 'POST', 'DELETE'])
@auto.doc()
def stack(id):
    '''
    Manage stack instance object operations.
    POSTs to this endpoint will insert a new element at the top of the stack
    instance object, above the current top element. The content of the new 
    element is the POST data passed with the request.
    Effectively push'ing to the stack.

    DELETEs to this endpoint will remove the element at the top of the stack
    instance object, reducing its size by one.
    Effectively pop'ing the stack.

    GETs to this endpoint will retrieve the stack instance object. There is no 
    equivalent replacement stack operation.

    All request methods return status code 500 Internal Server Error if an 
    error is encountered. 
    '''
    if request.method == 'GET':
        try:
            return str(wsStackList[id])
        except (IndexError, ValueError) as ie:
            return str(ie), status.HTTP_500_INTERNAL_SERVER_ERROR
    # Push to stack
    elif request.method == 'POST':
        try:
            wsStackList[id].push(request.get_data())
            return request.get_data()
        except (IndexError, ValueError) as ie:
            return str(ie), status.HTTP_500_INTERNAL_SERVER_ERROR
    # Pop from stack
    elif request.method == 'DELETE':
        try:
            return wsStackList[id].pop()
        except (IndexError, ValueError) as ie:
            return str(ie), status.HTTP_500_INTERNAL_SERVER_ERROR

@application.route("/stack/<int:id>/size", methods=['GET'])
@auto.doc()
def stackSize(id):
    '''
    GETs to this endpoint will retrieve the number of elements in the stack 
    instance object.
    '''
    if request.method == 'GET':
        return str(wsStackList[id].size())

@application.route("/stack/<int:id>/peek", methods=['GET'])
@auto.doc()
def stackPeek(id):
    '''
    GETs to this endpoint will retrieve the topmost element in the stack 
    instance object.

    Returns status code 500 Internal Server Error if an error is encountered. 
    '''
    if request.method == 'GET':
        try:
            return str(wsStackList[id].peek())
        except (IndexError, ValueError) as ie:
            return str(ie), status.HTTP_500_INTERNAL_SERVER_ERROR

@application.route("/stack/<int:id>/clear", methods=['DELETE'])
@auto.doc()
def stackClear(id):
    '''
    Clear all elements of the stack.
    DELETEs to this endpoint will remove all elements from the stack object. 
    Leaves the stack instance object in-place.

    Returns status code 500 Internal Server Error if an error is encountered. 
    '''
    if request.method == 'DELETE':
        try:
            return str(wsStackList[id].clear())
        except (IndexError, ValueError) as ie:
            return str(ie), status.HTTP_500_INTERNAL_SERVER_ERROR

@application.route('/documentation')
@auto.doc()
def documentation():
    '''
    GETs to this endpoint will retrieve API documentation. Autogenerated with
    Flask-Autodoc.
    '''
    return auto.html()

if __name__ == "__main__":
    application.debug = application.config["DEBUG"]
    application.run(host=application.config["HOST"], port=application.config["PORT"])

